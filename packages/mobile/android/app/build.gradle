apply plugin: 'com.android.application'
def propertiesFile = rootProject.file('keys.properties')

// Helper functions to get version and git info
def getPackageVersion() {
    def packageJsonFile = file('../../package.json')
    if (packageJsonFile.exists()) {
        def packageJson = new groovy.json.JsonSlurper().parseText(packageJsonFile.text)
        return packageJson.version ?: "1.0.0"
    }
    return "1.0.0"
}

def getGitCommitHash() {
    try {
        // Navigate from android/app/build.gradle to repository root
        // android/app -> android -> packages/mobile -> packages -> root
        def repoRoot = file('../../../../')
        def gitDir = new File(repoRoot, '.git')
        if (gitDir.exists()) {
            def proc = "git rev-parse --short HEAD".execute(null, repoRoot)
            proc.waitFor()
            if (proc.exitValue() == 0) {
                return proc.text.trim()
            }
        }
        // Fallback: try from mobile directory
        def mobileRoot = file('../../')
        def gitDirMobile = new File(mobileRoot, '.git')
        if (gitDirMobile.exists()) {
            def proc = "git rev-parse --short HEAD".execute(null, mobileRoot)
            proc.waitFor()
            if (proc.exitValue() == 0) {
                return proc.text.trim()
            }
        }
    } catch (Exception e) {
        logger.warn("Could not get git commit hash: ${e.message}")
    }
    return "unknown"
}

def appVersion = getPackageVersion()
def gitHash = getGitCommitHash()

android {
    namespace "org.idpass.datacollectapp"
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "org.idpass.datacollectapp"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
   
    signingConfigs{
        release {
            if (propertiesFile.exists()) {
                def Properties properties = new Properties()
                properties.load(new FileInputStream(propertiesFile))
                storeFile file(properties.getProperty('KEY_PATH'))
                storePassword properties.getProperty('KEY_STORE_PASSWORD')
                keyAlias properties.getProperty('KEY_ALIAS')
                keyPassword properties.getProperty('KEY_PASSWORD')
            }
          
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    // Customize APK output filename
    // Format: idpass-data-collect-mobile-v1.0.0-debug-76dbce0.apk
    applicationVariants.all { variant ->
        variant.outputs.all {
            def buildType = variant.buildType.name
            def normalizedHash = gitHash.replace("unknown", "local")
            def fileName = "idpass-data-collect-mobile-v${appVersion}-${buildType}-${normalizedHash}.apk"
            fileName = fileName.replaceAll(/[^a-zA-Z0-9.-]/, "-")
            outputFileName = fileName
        }
    }
}

repositories {
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation project(':capacitor-cordova-android-plugins')
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
